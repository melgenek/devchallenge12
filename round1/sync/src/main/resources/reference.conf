http {
  interface = "0.0.0.0"
  interface = ${?INTERFACE}
  port = 8080
  port = ${?PORT}
}

akka {
  loglevel = "DEBUG"
  log-dead-letters = off
}

akka.http.server.parsing {
  # Maximum content length which should not be exceeded by incoming HttpRequests.
  # For file uploads which use the entityBytes Source of an incoming HttpRequest it is safe to
  # set this to a very high value (or to `infinite` if feeling very adventurous) as the streaming
  # upload will be back-pressured properly by Akka Streams.
  # Please note however that this setting is a global property, and is applied to all incoming requests,
  # not only file uploads consumed in a streaming fashion, so pick this limit wisely.
  max-content-length = "infinite"
}

akka.http.client.parsing {
  # Default maximum content length which should not be exceeded by incoming request entities.
  # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
  # Note that it is not necessarily a problem to set this to a high value as all stream operations
  # are always properly backpressured.
  # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
  # an excessive amount of server resources.
  #
  # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
  # programmatically via `withSizeLimit`.)
  max-content-length = "infinite"
}

discovery {
  consul {
    host = ${?CONSUL_HOST}
    port = ${?CONSUL_PORT}
  }
}

aerospike {
  namespace = "sync"
  host = ${?AEROSPIKE_HOST}
  port = 3000
  port = ${?AEROSPIKE_PORT}
}

sync {
  queue {
    name = "sync-queue"
  }
}

amqp {
  host = ${?AMQP_HOST}
  port = ${?AMQP_PORT}
  user = ${?AMQP_USER}
  password = ${?AMQP_PASSWORD}
}

replication-factor = ${?REPLICATION_FACTOR}
